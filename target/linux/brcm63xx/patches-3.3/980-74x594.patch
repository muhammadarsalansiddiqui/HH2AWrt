--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -453,4 +453,13 @@
 	help
 	  Select this option to enable GPIO driver for the TPS65910
 	  chip family.
+
+comment "Other GPIO expanders"
+
+config GPIO_74X594
+       tristate "GEN 74X594 Output expanders"
+       help
+         Platform driver for 74X594 8-output Expanders. This
+         provides a GPIO interface supporting outputs.
+
 endif
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -20,6 +20,7 @@
 obj-$(CONFIG_GPIO_GENERIC)	+= gpio-generic.o
 
 obj-$(CONFIG_GPIO_74X164)	+= gpio-74x164.o
+obj-$(CONFIG_GPIO_74X594)	+= gpio-74x594.o
 obj-$(CONFIG_GPIO_AB8500)	+= gpio-ab8500.o
 obj-$(CONFIG_GPIO_ADP5520)	+= gpio-adp5520.o
 obj-$(CONFIG_GPIO_ADP5588)	+= gpio-adp5588.o
--- /dev/null
+++ b/include/linux/74x594.h
@@ -0,0 +1,27 @@
+/*
+ *  74x594 - Serial-in/parallel-out shift register
+ *  Based on the early version of 74hc164.h available at :-
+ *  http://www.kerneltrap.org/mailarchive/linux-kernel/2010/8/29/4612715
+ *  Provided by :-
+ *	Copyright (C) 2010 Gabor Juhos <juh...@openwrt.org>
+ *	Copyright (C) 2010 Miguel Gaio <miguel.g...@efixo.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ */
+
+#ifndef __74X594_H
+#define __74X594_H
+
+#define GEN_74X594_DRIVER_NAME "74x594"
+
+struct gen_74x594_platform_data {
+	unsigned	gpio_base;
+	unsigned	gpio_pin_data;
+	unsigned	gpio_pin_shift_clk;
+	unsigned	gpio_pin_latch_clk;
+	unsigned	num_gpios;
+};
+
+#endif /* __74X594_H */
--- /dev/null
+++ b/drivers/gpio/gpio-74x594.c
@@ -0,0 +1,250 @@
+/*
+ *  74x594 - output expander  GPIO driver
+ *  Based on the early version of 74hc164.c available at :-
+ *  http://www.kerneltrap.org/mailarchive/linux-kernel/2010/8/29/4612715
+ *  Provided by :-
+ *	Copyright (C) 2010 Gabor Juhos <juh...@openwrt.org>
+ *	Copyright (C) 2010 Miguel Gaio <miguel.g...@efixo.com>
+ *  
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/bitops.h>
+#include <linux/platform_device.h>
+#include <linux/74x594.h>
+
+
+struct gen_74x594_chip {
+	struct device		*parent;
+	struct gpio_chip	gpio_chip;
+	struct mutex		lock;
+	long			mask;
+};
+
+static void gen_74x594_set_value(struct gpio_chip *, unsigned, int);
+
+static struct gen_74x594_chip *gpio_to_chip(struct gpio_chip *gc)
+{
+	return container_of(gc, struct gen_74x594_chip, gpio_chip);
+}
+
+static int gen_74x594_direction_input(struct gpio_chip *gc, unsigned offset)
+{
+	WARN_ON(1);
+	return -EINVAL;
+}
+
+static int gen_74x594_direction_output(struct gpio_chip *gc,
+					unsigned offset, int val)
+{
+	gen_74x594_set_value(gc, offset, val);
+	return 0;
+}
+
+static int gen_74x594_get_value(struct gpio_chip *gc, unsigned offset)
+{
+	struct gen_74x594_chip *chip = gpio_to_chip(gc);
+	int ret;
+
+	mutex_lock(&chip->lock);
+	ret = test_bit(offset, &chip->mask);
+	mutex_unlock(&chip->lock);
+
+	return ret;
+}
+
+static void gen_74x594_set_value(struct gpio_chip *gc,
+				  unsigned offset, int val)
+{
+	struct gen_74x594_chip *chip;
+	struct gen_74x594_platform_data *pdata;
+	long mask;
+	int one_bit_mask;
+	int refresh;
+	int i;
+
+	chip = gpio_to_chip(gc);
+	pdata = chip->parent->platform_data;
+
+	mutex_lock(&chip->lock);
+	if (val)
+		refresh = (test_and_set_bit(offset, &chip->mask) != val);
+	else
+		refresh = (test_and_clear_bit(offset, &chip->mask) != val);
+
+	if (refresh) {
+		mask = chip->mask; /* this is the one that contains the state of all gpio's */
+		one_bit_mask = 1 << (pdata->num_gpios - 1);
+/*		printk("74x594: mask= 0x%4X\n",mask);		*/
+		for (i = pdata->num_gpios; i > 0; --i, mask <<= 1) {
+			gpio_set_value(pdata->gpio_pin_data, mask & one_bit_mask);
+			gpio_set_value(pdata->gpio_pin_shift_clk, 1);
+			gpio_set_value(pdata->gpio_pin_shift_clk, 0);
+		}
+		gpio_set_value(pdata->gpio_pin_latch_clk, 1);
+		gpio_set_value(pdata->gpio_pin_latch_clk, 0);
+	}
+	mutex_unlock(&chip->lock);
+}
+
+static int __devinit gen_74x594_probe(struct platform_device *pdev)
+{
+	struct gen_74x594_platform_data *pdata;
+	struct gen_74x594_chip *chip;
+	struct gpio_chip *gc;
+	int err;
+
+	pdata = pdev->dev.platform_data;
+	if (pdata == NULL) {
+		dev_dbg(&pdev->dev, "no platform data specified\n");
+		return -EINVAL;
+	}
+
+	chip = kzalloc(sizeof(struct gen_74x594_chip), GFP_KERNEL);
+	if (chip == NULL) {
+		dev_err(&pdev->dev, "no memory for private data\n");
+		return -ENOMEM;
+	}
+
+	err = gpio_request(pdata->gpio_pin_latch_clk, dev_name(&pdev->dev));
+	if (err) {
+		dev_err(&pdev->dev, "unable to claim gpio %u, err=%d\n",
+			pdata->gpio_pin_latch_clk, err);
+		goto err_free_chip;
+	}
+
+	err = gpio_request(pdata->gpio_pin_shift_clk, dev_name(&pdev->dev));
+	if (err) {
+		dev_err(&pdev->dev, "unable to claim gpio %u, err=%d\n",
+			pdata->gpio_pin_shift_clk, err);
+		goto err_free_latch_clk;
+	}
+
+	err = gpio_request(pdata->gpio_pin_data, dev_name(&pdev->dev));
+	if (err) {
+		dev_err(&pdev->dev, "unable to claim gpio %u, err=%d\n",
+			pdata->gpio_pin_data, err);
+		goto err_free_shift_clk;
+	}
+
+	err = gpio_direction_output(pdata->gpio_pin_latch_clk, 0);
+	if (err) {
+		dev_err(&pdev->dev,
+			"unable to set direction of gpio %u, err=%d\n",
+			pdata->gpio_pin_latch_clk, err);
+		goto err_free_data;
+	}
+
+	err = gpio_direction_output(pdata->gpio_pin_shift_clk, 0);
+	if (err) {
+		dev_err(&pdev->dev,
+			"unable to set direction of gpio %u, err=%d\n",
+			pdata->gpio_pin_shift_clk, err);
+		goto err_free_data;
+	}
+
+	err = gpio_direction_output(pdata->gpio_pin_data, 0);
+	if (err) {
+		dev_err(&pdev->dev,
+			"unable to set direction of gpio %u, err=%d\n",
+			pdata->gpio_pin_data, err);
+		goto err_free_data;
+	}
+
+	chip->parent = &pdev->dev;
+	mutex_init(&chip->lock);
+
+	gc = &chip->gpio_chip;
+
+	gc->direction_input  = gen_74x594_direction_input;
+	gc->direction_output = gen_74x594_direction_output;
+	gc->get = gen_74x594_get_value;
+	gc->set = gen_74x594_set_value;
+	gc->can_sleep = 1;
+
+	gc->base = pdata->gpio_base;
+	gc->ngpio = pdata->num_gpios;
+	gc->label = dev_name(chip->parent);
+	gc->dev = chip->parent;
+	gc->owner = THIS_MODULE;
+
+	err = gpiochip_add(&chip->gpio_chip);
+	if (err) {
+		dev_err(&pdev->dev, "unable to add gpio chip, err=%d\n", err);
+		goto err_free_data;
+	}
+
+	platform_set_drvdata(pdev, chip);
+	return 0;
+
+err_free_data:
+	gpio_free(pdata->gpio_pin_data);
+err_free_shift_clk:
+	gpio_free(pdata->gpio_pin_shift_clk);
+err_free_latch_clk:
+	gpio_free(pdata->gpio_pin_latch_clk);
+err_free_chip:
+	kfree(chip);
+	return err;
+}
+
+static int gen_74x594_remove(struct platform_device *pdev)
+{
+	struct gen_74x594_chip *chip = platform_get_drvdata(pdev);
+	struct gen_74x594_platform_data *pdata = pdev->dev.platform_data;
+
+	if (chip) {
+		int err;
+
+		err = gpiochip_remove(&chip->gpio_chip);
+		if (err) {
+			dev_err(&pdev->dev,
+				"unable to remove gpio chip, err=%d\n",
+				err);
+			return err;
+		}
+
+		gpio_free(pdata->gpio_pin_latch_clk);
+		gpio_free(pdata->gpio_pin_shift_clk);
+		gpio_free(pdata->gpio_pin_data);
+
+		kfree(chip);
+		platform_set_drvdata(pdev, NULL);
+	}
+
+	return 0;
+}
+
+static struct platform_driver gen_74x594_driver = {
+	.probe		= gen_74x594_probe,
+	.remove		= __devexit_p(gen_74x594_remove),
+	.driver = {
+		.name	= GEN_74X594_DRIVER_NAME,
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init gen_74x594_init(void)
+{
+	return platform_driver_register(&gen_74x594_driver);
+}
+subsys_initcall(gen_74x594_init);
+
+static void __exit gen_74x594_exit(void)
+{
+	platform_driver_unregister(&gen_74x594_driver);
+}
+module_exit(gen_74x594_exit);
+
+MODULE_AUTHOR("Gabor Juhos <juh...@openwrt.org>");
+MODULE_AUTHOR("Miguel Gaio <miguel.g...@efixo.com>");
+MODULE_AUTHOR("john101a @ www.psidoc.com");
+MODULE_DESCRIPTION("GPIO expander driver for 74HC594");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:" GEN_74X594_DRIVER_NAME);
